/* --------------------------------------------------
   TRY / CATCH ERROR HANDLING
   --------------------------------------------------
   Key points:
   ‚Ä¢ Errors thrown inside nested functions "bubble up" to the nearest try/catch
   ‚Ä¢ The catch block catches it anywhere in that chain
   ‚Ä¢ finally always runs (cleanup, logging, etc.)
-------------------------------------------------- */

// Deepest function ‚Äî directly throws an error
function stepThree() {
  console.log('‚û°Ô∏è  stepThree started');
  throw new Error('‚ö° Something went wrong in stepThree!');
}

// Middle function ‚Äî calls stepThree
function stepTwo() {
  console.log('‚û°Ô∏è  stepTwo started');
  stepThree(); // if this throws, stepTwo does NOT continue
  console.log('‚úÖ stepTwo completed'); // this won't run if stepThree throws
}

// Top-level function ‚Äî calls stepTwo
function stepOne() {
  console.log('‚û°Ô∏è  stepOne started');
  stepTwo();
  console.log('‚úÖ stepOne completed'); // this won't run if stepTwo throws
}

// Wrap entire chain in try/catch
try {
  console.log('üöÄ Starting main process');
  stepOne();
  console.log('‚úÖ Main process completed successfully');
} catch (err) {
  console.log('‚ùå Error caught in main:', err.message);
} finally {
  console.log('‚ú® Finally block: cleanup actions always run');
}

/* 
Expected output:

üöÄ Starting main process
‚û°Ô∏è  stepOne started
‚û°Ô∏è  stepTwo started
‚û°Ô∏è  stepThree started
‚ùå Error caught in main: ‚ö° Something went wrong in stepThree!
‚ú® Finally block: cleanup actions always run

‚Ä¢ Notice how "‚úÖ stepTwo completed" and "‚úÖ stepOne completed" never print ‚Äî 
  they are skipped as soon as an error is thrown.
‚Ä¢ Only the outermost catch block runs.
*/
