/* --------------------------------------------------
   TRY / CATCH in each function
   --------------------------------------------------
   Key points:
   ‚Ä¢ If each function has its own try/catch,
     every function in the chain can handle and log errors locally.
   ‚Ä¢ The outer catch still runs if errors are re-thrown.
   ‚Ä¢ ERROR once thrown, is caught EXACTLY once. You MUST throw again if you want to propagate it.
-------------------------------------------------- */

function stepThree() {
  console.log('‚û°Ô∏è stepThree started');
  try {
    throw new Error('‚ö° Error inside stepThree!');
  } catch (err) {
    console.log('‚ùå stepThree caught:', err.message);
    // You can rethrow to pass to outer catch if needed
    // throw err; // IT IS YOUR DECISION TO RE-THROW
  }
  console.log('‚úÖ stepThree finished');
}

function stepTwo() {
  console.log('‚û°Ô∏è stepTwo started');
  try {
    stepThree();
  } catch (err) {
    console.log('‚ùå stepTwo caught:', err.message);
  }
  console.log('‚úÖ stepTwo finished');
}

function stepOne() {
  console.log('‚û°Ô∏è stepOne started');
  try {
    stepTwo();
  } catch (err) {
    console.log('‚ùå stepOne caught:', err.message);
  }
  console.log('‚úÖ stepOne finished');
}

try {
  console.log('üöÄ Starting main process');
  stepOne();
  console.log('‚úÖ Main process completed successfully');
} catch (err) {
  console.log('‚ùå Main catch:', err.message);
} finally {
  console.log('‚ú® Finally block always runs');
}

/* 
Expected output:

üöÄ Starting main process
‚û°Ô∏è stepOne started
‚û°Ô∏è stepTwo started
‚û°Ô∏è stepThree started
‚ùå stepThree caught: ‚ö° Error inside stepThree!
‚úÖ stepThree finished
‚úÖ stepTwo finished
‚úÖ stepOne finished
‚úÖ Main process completed successfully
‚ú® Finally block always runs

‚Ä¢ Notice: Each function logs its own "caught" message and continues!
‚Ä¢ If stepThree re-threw the error, it would continue bubbling.
*/
